name: Build, publish and deploy docker

on:
  push:
    branches: [ 'main' ]
    tags:
      - 'v*'


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    name: Build and push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            type=raw,value=test,enable=true

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_VERSION=${{ github.ref_name }}

  deploy-testing:
    name: Deploy Testing
    needs: build-and-push-image
    runs-on: [ self-hosted, Linux ]
    environment:
      name: Testing
      url: https://api.test.profcomff.com/auth
    env:
      CONTAINER_NAME: com_profcomff_api_auth_test
    permissions:
      packages: read

    steps:
      - name: Pull new version
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test

      - name: Migrate DB
        run: |
          docker run \
            --rm \
            --network=web \
            --env DB_DSN=${{ secrets.DB_DSN }} \
            --name ${{ env.CONTAINER_NAME }}_migration \
            --workdir="/" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test \
            alembic upgrade head

      - name: Run new version
        id: run_prod
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true && docker rm ${{ env.CONTAINER_NAME }} || true
          docker run \
            --detach \
            --restart always \
            --network=web \
            --env DB_DSN='${{ secrets.DB_DSN }}' \
            --env ROOT_PATH='/auth' \
            --env EMAIL='${{ secrets.EMAIL }}' \
            --env EMAIL_PASS='${{ secrets.EMAIL_PASS }}' \
            --env SMTP_HOST='mail.profcomff.com' \
            --env SMTP_PORT='465' \
            --env APPLICATION_HOST='${{ vars.HOST }}' \
            --env GOOGLE_REDIRECT_URL='${{ vars.GOOGLE_REDIRECT_URL }}' \
            --env GOOGLE_CREDENTIALS='${{ secrets.GOOGLE_CREDENTIALS }}' \
            --env PHYSICS_REDIRECT_URL='${{ vars.PHYSICS_REDIRECT_URL }}' \
            --env PHYSICS_CREDENTIALS='${{ secrets.PHYSICS_CREDENTIALS }}' \
            --env LKMSU_REDIRECT_URL='${{ vars.LKMSU_REDIRECT_URL }}' \
            --env LKMSU_CLIENT_ID='${{ secrets.LKMSU_CLIENT_ID }}' \
            --env LKMSU_CLIENT_SECRET='${{ secrets.LKMSU_CLIENT_SECRET }}' \
            --env YANDEX_REDIRECT_URL='${{ vars.YANDEX_REDIRECT_URL }}' \
            --env YANDEX_CLIENT_ID='${{ secrets.YANDEX_CLIENT_ID }}' \
            --env YANDEX_CLIENT_SECRET='${{ secrets.YANDEX_CLIENT_SECRET }}' \
            --env MY_MSU_REDIRECT_URL='${{ vars.MY_MSU_REDIRECT_URL }}' \
            --env MY_MSU_CLIENT_ID='${{ secrets.MY_MSU_CLIENT_ID }}' \
            --env MY_MSU_CLIENT_SECRET='${{ secrets.MY_MSU_CLIENT_SECRET }}' \
            --env GITHUB_REDIRECT_URL='${{ vars.GH_REDIRECT_URL }}' \
            --env GITHUB_CLIENT_ID='${{ secrets.GH_CLIENT_ID }}' \
            --env GITHUB_CLIENT_SECRET='${{ secrets.GH_CLIENT_SECRET }}' \
            --env TELEGRAM_REDIRECT_URL='${{ vars.TELEGRAM_REDIRECT_URL }}' \
            --env TELEGRAM_BOT_TOKEN='${{ secrets.TELEGRAM_BOT_TOKEN }}' \
            --env VK_REDIRECT_URL='${{ vars.VK_REDIRECT_URL }}' \
            --env VK_CLIENT_ID='${{ secrets.VK_CLIENT_ID }}' \
            --env VK_CLIENT_ACCESS_TOKEN='${{ secrets.VK_CLIENT_ACCESS_TOKEN }}' \
            --env VK_CLIENT_SECRET='${{ secrets.VK_CLIENT_SECRET }}' \
            --env ENCRYPTION_KEY='${{ secrets.ENCRYPTION_KEY }}' \
            --env KAFKA_DSN='${{ secrets.KAFKA_DSN }}' \
            --env KAFKA_LOGIN='${{ secrets.KAFKA_LOGIN }}' \
            --env KAFKA_PASSWORD='${{ secrets.KAFKA_PASSWORD }}' \
            --env KAFKA_USER_LOGIN_TOPIC_NAME='${{ secrets.KAFKA_USER_LOGIN_TOPIC_NAME }}' \
            --env GUNICORN_CMD_ARGS='--log-config  logging_test.conf' \
            --name ${{ env.CONTAINER_NAME }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test

  deploy-production:
    name: Deploy Production
    needs: build-and-push-image
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: [ self-hosted, Linux ]
    environment:
      name: Production
      url: https://api.profcomff.com/auth
    env:
      CONTAINER_NAME: com_profcomff_api_auth
    permissions:
      packages: read

    steps:
      - name: Pull new version
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Migrate DB
        run: |
          docker run \
            --rm \
            --network=web \
            --env DB_DSN=${{ secrets.DB_DSN }} \
            --name ${{ env.CONTAINER_NAME }}_migration \
            --workdir="/" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            alembic upgrade head

      - name: Run new version
        id: run_test
        run: |
          docker stop ${{ env.CONTAINER_NAME }} || true && docker rm ${{ env.CONTAINER_NAME }} || true
          docker run \
            --detach \
            --restart always \
            --network=web \
            --env DB_DSN='${{ secrets.DB_DSN }}' \
            --env ROOT_PATH='/auth' \
            --env EMAIL='${{ secrets.EMAIL }}' \
            --env EMAIL_PASS='${{ secrets.EMAIL_PASS }}' \
            --env ENABLED_AUTH_METHODS='${{ vars.ENABLED_AUTH_METHODS }}' \
            --env SMTP_HOST='mail.profcomff.com' \
            --env SMTP_PORT='465' \
            --env APPLICATION_HOST='${{ vars.HOST }}' \
            --env GOOGLE_REDIRECT_URL='${{ vars.GOOGLE_REDIRECT_URL }}' \
            --env GOOGLE_CREDENTIALS='${{ secrets.GOOGLE_CREDENTIALS }}' \
            --env PHYSICS_REDIRECT_URL='${{ vars.PHYSICS_REDIRECT_URL }}' \
            --env PHYSICS_CREDENTIALS='${{ secrets.PHYSICS_CREDENTIALS }}' \
            --env LKMSU_REDIRECT_URL='${{ vars.LKMSU_REDIRECT_URL }}' \
            --env LKMSU_CLIENT_ID='${{ secrets.LKMSU_CLIENT_ID }}' \
            --env LKMSU_CLIENT_SECRET='${{ secrets.LKMSU_CLIENT_SECRET }}' \
            --env YANDEX_REDIRECT_URL='${{ vars.YANDEX_REDIRECT_URL }}' \
            --env YANDEX_CLIENT_ID='${{ secrets.YANDEX_CLIENT_ID }}' \
            --env YANDEX_CLIENT_SECRET='${{ secrets.YANDEX_CLIENT_SECRET }}' \
            --env MY_MSU_REDIRECT_URL='${{ vars.MY_MSU_REDIRECT_URL }}' \
            --env MY_MSU_CLIENT_ID='${{ secrets.MY_MSU_CLIENT_ID }}' \
            --env MY_MSU_CLIENT_SECRET='${{ secrets.MY_MSU_CLIENT_SECRET }}' \
            --env GITHUB_REDIRECT_URL='${{ vars.GH_REDIRECT_URL }}' \
            --env GITHUB_CLIENT_ID='${{ secrets.GH_CLIENT_ID }}' \
            --env GITHUB_CLIENT_SECRET='${{ secrets.GH_CLIENT_SECRET }}' \
            --env TELEGRAM_REDIRECT_URL='${{ vars.TELEGRAM_REDIRECT_URL }}' \
            --env TELEGRAM_BOT_TOKEN='${{ secrets.TELEGRAM_BOT_TOKEN }}' \
            --env VK_REDIRECT_URL='${{ vars.VK_REDIRECT_URL }}' \
            --env VK_CLIENT_ID='${{ secrets.VK_CLIENT_ID }}' \
            --env VK_CLIENT_ACCESS_TOKEN='${{ secrets.VK_CLIENT_ACCESS_TOKEN }}' \
            --env VK_CLIENT_SECRET='${{ secrets.VK_CLIENT_SECRET }}' \
            --env ENCRYPTION_KEY='${{ secrets.ENCRYPTION_KEY }}' \
            --env KAFKA_DSN='${{ secrets.KAFKA_DSN }}' \
            --env KAFKA_LOGIN='${{ secrets.KAFKA_LOGIN }}' \
            --env KAFKA_PASSWORD='${{ secrets.KAFKA_PASSWORD }}' \
            --env KAFKA_USER_LOGIN_TOPIC_NAME='${{ secrets.KAFKA_USER_LOGIN_TOPIC_NAME }}' \
            --env GUNICORN_CMD_ARGS='--log-config  logging_prod.conf' \
            --name ${{ env.CONTAINER_NAME }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
